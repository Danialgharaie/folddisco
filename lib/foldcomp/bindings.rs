/* automatically generated by rust-bindgen 0.69.4 */

pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct atom_t {
    pub aa: [::std::os::raw::c_char; 3usize],
    pub chain: ::std::os::raw::c_char,
    pub atom: [::std::os::raw::c_char; 4usize],
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub bfactor: f32,
    pub atomIdx: ::std::os::raw::c_int,
    pub resIdx: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_atom_t() {
    const UNINIT: ::std::mem::MaybeUninit<atom_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<atom_t>(),
        32usize,
        concat!("Size of: ", stringify!(atom_t))
    );
    assert_eq!(
        ::std::mem::align_of::<atom_t>(),
        4usize,
        concat!("Alignment of ", stringify!(atom_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aa) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(atom_t),
            "::",
            stringify!(aa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chain) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(atom_t),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atom) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(atom_t),
            "::",
            stringify!(atom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(atom_t), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(atom_t), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(atom_t), "::", stringify!(z))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bfactor) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(atom_t),
            "::",
            stringify!(bfactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atomIdx) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(atom_t),
            "::",
            stringify!(atomIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resIdx) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(atom_t),
            "::",
            stringify!(resIdx)
        )
    );
}
extern "C" {
    pub fn foldcomp_create() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn foldcomp_process(
        instance: *mut ::std::os::raw::c_void,
        input: *const ::std::os::raw::c_uchar,
        length: usize,
        atom_count: *mut usize,
    ) -> *mut atom_t;
}
extern "C" {
    pub fn foldcomp_free(output: *mut atom_t);
}
extern "C" {
    pub fn foldcomp_destroy(instance: *mut ::std::os::raw::c_void);
}
